syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.arktoria.acolors";
option java_outer_classname = "AColoRSProto";

package acolors;

service ProfileManager {
    rpc CountGroups(CountGroupsRequest) returns(CountGroupsReply) {}
    rpc ListAllGroups(ListAllGroupsRequest) returns (GroupList) {}

    rpc CountNodes(CountNodesRequest) returns(CountNodesReply) {}
    rpc ListAllNodes(ListAllNodesRequest) returns(NodeList) {}
    
    rpc GetGroupByID(GetGroupByIDRequest) returns (GroupData) {}
    rpc GetNodeByID(GetNodeByIDRequest) returns (NodeData) {}

    rpc SetGroupByID(SetGroupByIDRequest) returns (SetGroupByIDReply) {}
    rpc SetNodeByID(SetNodeByIDRequest) returns (SetNodeByIDReply) {}

    rpc RemoveGroupByID(RemoveGroupByIDRequest) returns (RemoveGroupByIDReply) {}
    rpc RemoveNodeByID(RemoveNodeByIDRequest) returns (RemoveNodeByIDReply) {}

    rpc AppendGroup(AppendGroupRequest) returns (AppendGroupReply) {}
    rpc AppendNode(AppendNodeRequest) returns (AppendNodeReply) {}

    rpc UpdateGroupByID(UpdateGroupByIDRequest) returns (UpdateGroupByIDReply) {}
}


message CountGroupsRequest {}
message ListAllGroupsRequest {}
message SetGroupByIDReply {}
message SetNodeByIDReply {}
message RemoveGroupByIDReply {}
message RemoveNodeByIDReply {}
message AppendGroupReply {}
message UpdateGroupByIDReply {}
message AppendNodeReply {}

message CountNodesRequest {
    int32 group_id = 1;
}

message ListAllNodesRequest {
    int32 group_id = 1;
}

message GetGroupByIDRequest {
    int32 group_id = 1;
}
message GetNodeByIDRequest {
    int32 node_id = 1;
}
message SetGroupByIDRequest {
    int32 group_id = 1;
    GroupData data = 2;
}
message SetNodeByIDRequest {
    int32 node_id = 1;
    NodeData data = 2;
}
message RemoveGroupByIDRequest {
    int32 group_id = 1;
}
message RemoveNodeByIDRequest {
    int32 node_id = 1;
}
message AppendGroupRequest {
    GroupData data = 1;
}

message UpdateGroupByIDRequest {
    int32 group_id = 1;
}

message AppendNodeRequest {
    int32 group_id = 1;
    NodeData data = 2;
}

message CountNodesReply {
    uint64 count = 1;
}

message CountGroupsReply {
    uint64 count = 1;
}

message GroupList {
    uint64 length = 1;
    repeated GroupData entries = 2;
}
message NodeList {
    uint64 length = 1;
    repeated NodeData entries = 2;
}

enum EntryType {
    VMESS = 0;
    SHADOWSOCKS = 1;
    TROJAN = 2;
    RAW = 3;
    SCHEME = 4;
    UNKNOWN = 5;
}

message NodeData {
    int32 id = 1;
    string name = 2;
    int32 group_id = 3;
    string group_name = 4;
    int32 routing_id = 5;
    string routing_name = 6;
    EntryType protocol = 7;
    string address = 8;
    int32 port = 9;
    string password = 10;
    string raw = 11;
    string url = 12;
    int32 latency = 13;
    int64 upload = 14;
    int64 download = 15;
    int64 create_at = 16;
    int64 modified_at = 17;
}

enum SubscriptionType {
    BASE64 = 0;
    SIP008 = 1;
    JSONRAW = 2;
}
message GroupData {
    int32 id = 1;
    string name = 2;
    bool is_subscription = 3;
    SubscriptionType group_type = 4;
    string url = 5;
    int32 cycle_time = 6;
    int64 create_at = 7;
    int64 modified_at = 8;
}

service ConfigManager {

}

message Inbound
{
  message Auth
  {
    bool enable = 1;
    string username = 2;
    string password = 3;
  }

  message SOCKS5
  {
    bool enable = 1;
    string listen = 2;
    uint32 port = 3;
    bool udp_enable = 4;
    string udp_ip = 5;
    int32 user_level = 6;
    Auth auth = 7;
  }

  message HTTP
  {
    bool enable = 1;
    string listen = 2;
    uint32 port = 3;
    bool allow_transparent = 4;
    int64 timeout = 5;
    int32 user_level = 6;
    Auth auth = 7;
  }

  SOCKS5 socks5 = 1;
  HTTP http = 2;
}